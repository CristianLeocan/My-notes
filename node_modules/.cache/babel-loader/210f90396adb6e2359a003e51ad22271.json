{"ast":null,"code":"var _jsxFileName = \"G:\\\\03 Projects React\\\\app_my_notes\\\\my_notes\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Sidebar from './components/Sidebar/Sidebar';\nimport Editor from './components/Editor/Editor';\nimport Split from 'react-split';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [notes, setNotes] = useState(() => JSON.parse(localStorage.getItem(\"notes\")) || []);\n  const [currentNoteId, setCurrrentNoteId] = useState(notes[0] && notes[0].id || \"\");\n  useEffect(() => {\n    localStorage.setItem(\"notes\", JSON.stringify(notes));\n  }, [notes]);\n\n  function createNewNote() {\n    const newNote = {\n      id: nanoid(),\n      body: \"Type your note\"\n    };\n    setNotes(oldNotes => [newNote, ...oldNotes]);\n    setCurrrentNoteId(newNote.id);\n  }\n\n  function updateNote(text) {\n    setNotes(oldNotes => {\n      const newArray = [];\n\n      for (let i = 0; i < oldNotes.length; ++i) {\n        if (oldNotes[i].id === currentNoteId) {\n          newArray.unshift({ ...oldNotes[i],\n            body: text\n          });\n        } else {\n          newArray.push(oldNotes[i]);\n        }\n      }\n\n      return newArray;\n    });\n  }\n\n  function findCurrentNote() {\n    return notes.find(note => {\n      return note.id === currentNoteId;\n    }) || notes[0];\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: notes.length > 0 ? /*#__PURE__*/_jsxDEV(Split, {\n      sizes: [30, 70],\n      direction: \"horizontal\",\n      className: \"split\",\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n        notes: notes,\n        currentNote: findCurrentNote(),\n        setCurrrentNoteId: setCurrrentNoteId,\n        newNote: createNewNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), currentNoteId && notes.length > 0 && /*#__PURE__*/_jsxDEV(Editor, {\n        currentNote: findCurrentNote(),\n        updateNote: updateNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no--notes\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"You have no notes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"first--note\",\n        onClick: createNewNote,\n        children: \"Create one now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"TdpOGJKxQPC3khXBlGDkiaSyv8g=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Sidebar","Editor","Split","nanoid","App","notes","setNotes","JSON","parse","localStorage","getItem","currentNoteId","setCurrrentNoteId","id","setItem","stringify","createNewNote","newNote","body","oldNotes","updateNote","text","newArray","i","length","unshift","push","findCurrentNote","find","note"],"sources":["G:/03 Projects React/app_my_notes/my_notes/src/App.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport Sidebar from './components/Sidebar/Sidebar';\nimport Editor from './components/Editor/Editor';\nimport Split from 'react-split';\nimport {nanoid} from 'nanoid';\n\nexport default function App() {\n\n  const [notes, setNotes] = useState(\n    () => JSON.parse(localStorage.getItem(\"notes\")) || []\n  )\n  const [currentNoteId, setCurrrentNoteId] = useState(\n    (notes[0] && notes[0].id) || \"\"\n  )\n\n  useEffect(() => {\n    localStorage.setItem(\"notes\", JSON.stringify(notes))\n  }, [notes])\n  \n  function createNewNote() {\n    const newNote = {\n      id:nanoid(),\n      body:\"Type your note\"\n    }\n    setNotes(oldNotes => [newNote, ...oldNotes])\n    setCurrrentNoteId(newNote.id)\n  }\n\n  function updateNote(text) {\n    setNotes(oldNotes => {\n      const newArray = []\n      for (let i = 0; i < oldNotes.length; ++i) {\n        if(oldNotes[i].id === currentNoteId) {\n          newArray.unshift({ ...oldNotes[i], body: text})\n        } else {\n          newArray.push(oldNotes[i])\n        }\n      }\n      return newArray;\n    })     \n  }\n\n  function findCurrentNote() {\n    return notes.find(note => {\n      return note.id === currentNoteId\n    }) || notes[0]\n  }\n\n  return(\n    <main>\n      {\n        notes.length > 0\n        ?\n        <Split\n          sizes={[30, 70]}\n          direction=\"horizontal\"\n          className='split'\n          >\n            <Sidebar\n              notes={notes}\n              currentNote={findCurrentNote()}\n              setCurrrentNoteId={setCurrrentNoteId}\n              newNote={createNewNote}\n           />\n          {\n            currentNoteId &&\n            notes.length > 0 &&\n            <Editor\n              currentNote={findCurrentNote()}\n              updateNote={updateNote}\n            />\n          }\n        </Split>\n        :\n        <div className='no--notes'>\n          <h1>You have no notes</h1>\n          <button \n            className='first--note'\n            onClick={createNewNote}\n          >\n            Create one now\n          </button>\n        </div>          \n      }\n    </main>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}